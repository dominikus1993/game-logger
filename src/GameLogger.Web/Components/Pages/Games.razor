@page "/games"
@using GameLogger.Core.Data
@using GameLogger.Core.Repositories
@using GameLogger.Core.UseCases
@inject GetGamesUseCase GetGamesUseCase
@inject DeleteGameUseCase DeleteGameUseCase
@inject ILogger<Games> Logger
@rendermode InteractiveServer

<PageTitle>Games</PageTitle>

<h1>Games</h1>

<p>This component demonstrates showing data.</p>
@if (games is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th aria-label="Temperature in Celsius">Start Date</th>
            <th aria-label="Temperature in Farenheit">End Date</th>
            <th>Rating</th>
            <th>Hours Played</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var game in games)
        {
            <tr>
                <td>@game.Title</td>
                <td>@game.StartDate</td>
                <td>@game.FinishDate</td>
                <td>@game.Rating</td>
                <td>@game.HoursPlayed</td>
                <td><button @onclick="() => DeleteGame(game)">Usun gre</button></td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Game>? games;

    protected override async Task OnInitializedAsync()
    {
        var result = await GetGamesUseCase.Execute(new GetGamesQuery(1, 12));
        games = result is null or { Count: 0 } ? [] : result.ToList();
    }

    private async Task DeleteGame(Game game)
    {
        var result = await DeleteGameUseCase.Execute(game.Id);

        if (result.IsSuccess)
        {
            games?.Remove(game);
        }
        else
        {
            Logger.LogError(result.ErrorValue, "Failed to delete game: {GameId}", game.Id);
        }
    }

}