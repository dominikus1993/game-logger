@page "/stats"
@using BlazorBootstrap
@using GameLogger.Core.Data
@using GameLogger.Core.Providers
@using GameLogger.Core.Repositories
@using GameLogger.Core.UseCases
@inject GetPlatformStatisticsUseCase GetPlatformStatisticsUseCase
@inject ILogger<Stats> Logger
@rendermode InteractiveServer

<PageTitle>Games</PageTitle>

<h1>Games</h1>

<PieChart @ref="ratingChart" Width="500" />
<PieChart @ref="hoursChart" Width="500" />

@code {
    private IReadOnlyList<PlatformStatistics>? stats;
    private PieChart ratingChart = default!;
    private ChartData ratingChartData = default!;
    private PieChartOptions ratingPieChartOptions = default!;
    
    private PieChart hoursChart = default!;
    private ChartData hoursChartData = default!;
    private PieChartOptions hoursPieChartOptions = default!;
    
    protected override async Task OnInitializedAsync()
    {
        var result = await GetPlatformStatisticsUseCase.Execute();
        stats = result is { IsSuccess: true, Value.Count: > 0 } ? result.Value : [];
        InitRatingsChart();
        InitHoursChart();
    }

    private void InitRatingsChart()
    {
        ratingChartData = GetRatingChartData();
        ratingPieChartOptions = new PieChartOptions()
        {
            Responsive = true,
        };
        ratingPieChartOptions.Plugins.Title!.Text = "Platofrmy per avg rating";
        ratingPieChartOptions.Plugins.Title.Display = true;
    }

    private void InitHoursChart()
    {
        hoursPieChartOptions = new PieChartOptions()
        {
            Responsive = true,
        };
        hoursPieChartOptions.Plugins.Title!.Text = "Platofrmy godziny";
        hoursPieChartOptions.Plugins.Title.Display = true;
        hoursChartData = GetHoursChartData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ratingChart.InitializeAsync(ratingChartData, ratingPieChartOptions);
            await hoursChart.InitializeAsync(hoursChartData, hoursPieChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private ChartData GetRatingChartData()
    {
        if (stats is null or { Count: 0})
        {
            return new ChartData();
        }

        var data = stats.Select(x => (x.Platform, x.AvgRating)).ToArray();
        var res = new ChartData()
        {
            Labels = data.Select(x => x.Platform).ToList(),
            Datasets = [new PieChartDataset() { Data = data.Select(x => x.AvgRating).ToList(), Label = "Platforma" }],
        };
        return res;
    }
    
    private ChartData GetHoursChartData()
    {
        if (stats is null or { Count: 0})
        {
            return new ChartData();
        }

        var data = stats.Select(x => (x.Platform, x.AvgHoursPlayed)).ToArray();
        var res = new ChartData()
        {
            Labels = data.Select(x => x.Platform).ToList(),
            Datasets = [new PieChartDataset() { Data = data.Select(x => x.AvgHoursPlayed).ToList(), Label = "Platforma" }],
        };
        return res;
    }
}